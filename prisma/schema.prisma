generator client {
    provider = "prisma-client"
    output   = "../src/generated/prisma"
    runtime  = "deno"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum LocationType {
    combat
    event
    elite
    tavern
    treasure
    boss
    campfire
    shop
}

model Player {
    id         String  @id
    name       String
    health     Int
    maxHealth  Int     @default(10)
    lastTarget String?

    @@index([lastTarget])
}

model Location {
    id                    String       @id
    row                   Int
    col                   Int
    name                  String
    description           String
    attributes            Json
    type                  LocationType
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt
    fromPaths             Path[]       @relation("FromLocation")
    toPaths               Path[]       @relation("ToLocation")
    map                   Map          @relation("MapLocations", fields: [mapId], references: [id], onDelete: Cascade)
    mapId                 String
    mapsAsCurrentLocation Map[]        @relation("MapCurrentLocation")
    Map                   Map[]
}

model Path {
    id             String   @id
    fromLocation   Location @relation("FromLocation", fields: [fromLocationId], references: [id])
    fromLocationId String
    toLocation     Location @relation("ToLocation", fields: [toLocationId], references: [id])
    toLocationId   String
    description    String
    attributes     Json
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    map            Map?      @relation(fields: [mapId], references: [id], onDelete: Cascade)
    mapId          String?
}

model Guild {
    id           BigInt   @id
    updatedAt    DateTime @updatedAt
    seed         String   @default(uuid())
    randomCursor Int      @default(0)
    locationId   String?
    map          Map?      @relation(fields: [mapId], references: [id])
    mapId        String?   @unique
}

model Map {
    id                String     @id @default(uuid())
    locations         Location[] @relation("MapLocations")
    paths             Path[]
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    rows              Int
    cols              Int
    currentLocation   Location?  @relation("MapCurrentLocation", fields: [currentLocationId], references: [id])
    currentLocationId String?
    Location          Location?  @relation(fields: [locationId], references: [id])
    locationId        String?
    guild             Guild?     @relation
}
