generator client {
    provider = "prisma-client"
    output   = "../src/generated/prisma"
    runtime  = "deno"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Player {
    id          BigInt            @id
    name        String
    health      Int
    maxHealth   Int               @default(10)
    experience  Int               @default(0)
    gold        Int               @default(0)
    level       Int               @default(1)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    guildId     BigInt
    Guild       Guild             @relation(fields: [guildId], references: [id])
    encounterId String?
    encounter   Encounter?        @relation(fields: [encounterId], references: [id], onDelete: SetNull)
    initiative  Int?
    inventory   PlayerInventory[]
}

model Gear {
    id          String            @id @default(uuid())
    name        String
    description String
    type        GearType
    rarity      Rarity
    level       Int               @default(1)
    attack      Int               @default(0)
    defense     Int               @default(0)
    health      Int               @default(0)
    value       Int               @default(0)
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    inventory   PlayerInventory[]
}

model PlayerInventory {
    id        String   @id @default(uuid())
    playerId  BigInt
    gearId    String
    equipped  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    gear      Gear     @relation(fields: [gearId], references: [id], onDelete: Cascade)

    @@unique([playerId, gearId])
}

enum GearType {
    weapon
    armor
    accessory
    consumable
}

enum Rarity {
    common
    uncommon
    rare
    epic
    legendary
}

model Location {
    id          String       @id
    row         Int
    col         Int
    name        String
    description String
    attributes  Json
    type        LocationType
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    fromPaths   Path[]       @relation("FromLocation")
    toPaths     Path[]       @relation("ToLocation")
    guilds      Guild[]      @relation("GuildCurrentLocation")
    map         Map          @relation(fields: [mapId], references: [id], onDelete: Cascade)
    mapId       String
    encounter   Encounter?
}

enum LocationType {
    combat
    event
    elite
    treasure
    boss
    campfire
    shop
}

model Path {
    id             String   @id
    fromLocation   Location @relation("FromLocation", fields: [fromLocationId], references: [id])
    fromLocationId String
    toLocation     Location @relation("ToLocation", fields: [toLocationId], references: [id])
    toLocationId   String
    description    String
    attributes     Json
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    map            Map      @relation(fields: [mapId], references: [id], onDelete: Cascade)
    mapId          String
}

model Guild {
    id                BigInt    @id
    updatedAt         DateTime  @updatedAt
    seed              String    @default(uuid())
    randomCursor      Int       @default(0)
    currentLocationId String?
    currentLocation   Location? @relation("GuildCurrentLocation", fields: [currentLocationId], references: [id])
    map               Map?
    mapId             String?   @unique
    players           Player[]
}

model Map {
    id        String     @id @default(uuid())
    locations Location[]
    paths     Path[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    rows      Int
    cols      Int
    guildId   BigInt?    @unique
    guild     Guild?     @relation(fields: [guildId], references: [id])
}

model Encounter {
    id         String          @id @default(uuid())
    locationId String          @unique
    location   Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
    players    Player[]
    enemies    Enemy[]
    status     EncounterStatus
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
}

model Enemy {
    id          String    @id @default(uuid())
    encounterId String
    name        String
    maxHealth   Int
    health      Int
    initiative  Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    encounter   Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)
}

enum EncounterStatus {
    active
    victory
    defeat
}
